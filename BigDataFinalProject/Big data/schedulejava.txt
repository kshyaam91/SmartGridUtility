import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class schedule1 {

	public static int wattage, starttime, stoptime, runtime;
	public static String name, constraint;
	public static ArrayList<Integer> hourlist = new ArrayList<Integer>();
	public static ArrayList<Double> pricelist = new ArrayList<Double>();

	public static void main(String[] args) {
		readFileAtPath("Lmp1.txt");
		readFile("/home/hduser/tmp/newtimestamp.txt");

	}

	public static void readFileAtPath(String filename) {
		String[] f;

		HashMap<String, String> map = new HashMap<String, String>();
		// Lets make sure the file path is not empty or null
		if (filename == null || filename.isEmpty()) {
			System.out.println("Invalid File Path");
			return;
		}
		String filePath = System.getProperty("user.dir") + "/" + filename;
		BufferedReader inputStream = null;

		// We need a try catch block so we can handle any potential IO errors
		try {
			try {
				inputStream = new BufferedReader(new FileReader(filePath));
				String lineContent = null;
				// Loop will iterate over each line within the file.
				// It will stop when no new lines are found.
				while ((lineContent = inputStream.readLine()) != null) {
					// System.out.println(lineContent);
					f = lineContent.split(",");

					map.put(f[1], f[0]);

				}

				// System.out.println(map);
				Map<String, String> treeMap = new TreeMap<String, String>(map);
				// System.out.println(treeMap);
				Set<String> keys = treeMap.keySet();
				for (String key : keys) {
					pricelist.add(Double.parseDouble(key)); // key of treeMap
					hourlist.add(Integer.parseInt(treeMap.get(key))); // value
																		// of
																		// treeMap

				}
				//System.out.println(pricelist); // print the keys
				//System.out.println(hourlist); // print the values(hours)

			}

			// Make sure we close the buffered reader.
			finally {
				if (inputStream != null)
					inputStream.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}// end of method

	public static void readFile(String filename) {
		String[] app;
		ArrayList<Integer> list = new ArrayList<Integer>();
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		list.add(0);
		if (filename == null || filename.isEmpty()) {
			System.out.println("Invalid File Path");
			return;
		}
		String filePath = filename;
		BufferedReader inputStream = null;

		try {
			try {
				inputStream = new BufferedReader(new FileReader(filePath));
				String lineContent = null;
				// Loop will iterate over each line within the file.
				// It will stop when no new lines are found.
				while ((lineContent = inputStream.readLine()) != null) {
					// System.out.println(lineContent);
					app = lineContent.split(" ");
					name = app[0];
					wattage = Integer.parseInt(app[1]);
					starttime = Integer.parseInt(app[2]);
					stoptime = Integer.parseInt(app[3]);
					runtime = Integer.parseInt(app[4]);
					constraint = app[5];

					// System.out.println(app[5]);
					if (constraint.equals("hc")) {
						Integer run = runtime;
						for (Integer integer : hourlist) {

							if (integer >= starttime && integer <= stoptime) {
								run--;
								/*Integer hour =(Integer.parseInt(integer.toString().substring(0,integer.toString().length()-2))-1); 
								list.set(hour, list.get(hourlist.indexOf(integer)) + wattage);*/
								list.set(hourlist.indexOf(integer), list.get(hourlist.indexOf(integer)) + wattage);
								if (run < 1) {
									break;
								}
							}

						}

						//System.out.println(list.toString());
					} else if (constraint.equals("sc")) {
						Integer run1 = runtime;
						for (Integer integer : hourlist) {
							
							if (integer >= starttime && integer <= 2400) {
								run1--;
								/*Integer hour1 =(Integer.parseInt(integer.toString().substring(0,integer.toString().length()-2))-1);
								list.set(hour1, list.get(hourlist.indexOf(integer)) + wattage);*/
								list.set(hourlist.indexOf(integer), list.get(hourlist.indexOf(integer)) + wattage);
								if (run1 < 1) {
									break;
								}
							}

						}
						//System.out.println(list.toString());
					}
					
				}
				System.out.println(list.toString());
				for(int i=0; i<list.size()-1;i++){
					if(list.get(i) > 20){
						list.set(i, list.get(i)-20);
					}
					else if(list.get(i)<20 &&list.get(i)!=0)
					{
						list.set(i, 0);
					}
				}
				//System.out.println("The schedule after 20 RSP is:");
				//System.out.println(list.toString());
			}

			// Make sure we close the buffered reader.
			finally {
				if (inputStream != null)
					inputStream.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}