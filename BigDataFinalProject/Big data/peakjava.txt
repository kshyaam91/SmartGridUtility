import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class peak {
	static List<Double> priceList = new ArrayList<Double>();

	public static void main(String[] args) {
		readPrices("Prices.txt");
		readFileAtPath("/tmp/hadoop-output.txt");

	}

	public static void readFileAtPath(String filename) {

		// Lets make sure the file path is not empty or null
		if (filename == null || filename.isEmpty()) {
			System.out.println("Invalid File Path");
			return;
		}
		String filePath = System.getProperty("user.dir") + "/" + filename;
		BufferedReader inputStream = null;

		// We need a try catch block so we can handle any potential IO errors
		try {
			try {
				inputStream = new BufferedReader(new FileReader(filePath));
				String lineContent = null;
				int i = 0;
				// Loop will iterate over each line within the file.
				// It will stop when no new lines are found.
				Double sum = 0.0;
				Double excesswattage = 0.0;
				while ((lineContent = inputStream.readLine()) != null) {
					// System.out.println(lineContent);
					String[] f = lineContent.split("\t");
					//Double differnce = new Double(f[1]) - randInt(150, 200);
					Double differnce = randInt(100, 200) - new Double(f[1]);
					
					if (differnce > 0.0)
						sum += (differnce * priceList.get(i));
						excesswattage += differnce;
					i++;
				}
				System.out.println("The excess wattage is:"+excesswattage+"and excess price is:"+sum);
				//System.out.println("The excess price is:"+sum);

				// System.out.println(pricelist); // print the keys
				// System.out.println(hourlist); // print the values(hours)

			}

			// Make sure we close the buffered reader.
			finally {
				if (inputStream != null)
					inputStream.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void readPrices(String filename) {

		// Lets make sure the file path is not empty or null
		if (filename == null || filename.isEmpty()) {
			System.out.println("Invalid File Path");
			return;
		}
		String filePath = System.getProperty("user.dir") + "/" + filename;
		BufferedReader inputStream = null;

		// We need a try catch block so we can handle any potential IO errors
		try {
			try {
				inputStream = new BufferedReader(new FileReader(filePath));
				String lineContent = null;
				// Loop will iterate over each line within the file.
				// It will stop when no new lines are found.
				Double sum = 0.0;
				while ((lineContent = inputStream.readLine()) != null) {
					// System.out.println(lineContent);
					priceList.add(new Double(lineContent));
				}

				// System.out.println(pricelist); // print the keys
				// System.out.println(hourlist); // print the values(hours)

			}

			// Make sure we close the buffered reader.
			finally {
				if (inputStream != null)
					inputStream.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static int randInt(int min, int max) {

		// Usually this can be a field rather than a method variable
		Random rand = new Random();

		// nextInt is normally exclusive of the top value,
		// so add 1 to make it inclusive
		int randomNum = rand.nextInt((max - min) + 1) + min;

		return randomNum;
	}
}